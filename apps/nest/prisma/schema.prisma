// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt  @id @default(autoincrement())
  profileId BigInt?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username         String
  name             String?
  password         String?
  jwtValidFrom     DateTime     @default(now()) // support revoke token
  confirmationHash String?
  provider         UserProvider // username, email, apple, google...
  profile          Profile?     @relation(fields: [profileId], references: [id])
  lastLoginAt      DateTime?
  blocked          Boolean      @default(false)
  confirmed        Boolean      @default(false)
  role             Role         @default(USER)

  verifyCode      String?   @unique
  verifyCodeCount Int       @default(0)
  verifyCreatedAt DateTime?

  // relations
  @@unique([username, provider])
}

enum UserProvider {
  USERNAME
  LOCAL // email
  google
  apple
  facebook
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model Profile {
  id BigInt @id @default(autoincrement())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  dob       DateTime?

  name   String
  avatar String?
  email  String?

  // relations
  users User[]
  todos Todo[]
  organizationMembers OrganizationMember[]
}

enum TodoStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Todo {
  id BigInt @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  status      TodoStatus @default(TODO)

  profileId BigInt
  profile   Profile @relation(fields: [profileId], references: [id])
}

model Organization {
  id BigInt @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  description String?

  members OrganizationMember[]
  indexers Indexer[]
}

enum OrganizationRole {
  OWNER
  MEMBER
}

model OrganizationMember {
  organizationId BigInt
  profileId BigInt

  role OrganizationRole

  organization Organization @relation(fields: [organizationId], references: [id])
  profile Profile @relation(fields: [profileId], references: [id])

  @@id([organizationId, profileId])
}

model Indexer {
  id BigInt @id @default(autoincrement())
  name String

  organizationId BigInt
  databaseId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  contracts IndexerContract[]
  database NeonDatabase? @relation(fields: [databaseId], references: [id])
}

model Contract {
  address String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startVersion BigInt

  indexers IndexerContract[]
}

model IndexerContract {
  indexerId BigInt
  contractAddress String

  indexer Indexer @relation(fields: [indexerId], references: [id])
  contract Contract @relation(fields: [contractAddress], references: [address])

  @@id([indexerId, contractAddress])
}

model NeonConfig {
  id BigInt @id
  projectCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currentProjectId String? @unique
  currentProject NeonProject? @relation(fields: [currentProjectId], references: [id])
}

model NeonProject {
  id String @id
  branchCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currentBranchId String? @unique
  currentBranch NeonBranch? @relation(fields: [currentBranchId], references: [id], name: "currentBranch")

  branches NeonBranch[]
  config NeonConfig?
}

model NeonBranch {
  id String @id
  databaseCount Int @default(0)
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project NeonProject @relation(fields: [projectId], references: [id])
  activeProject NeonProject? @relation(name: "currentBranch")

  databases NeonDatabase[]

}

model NeonDatabase {
  id Int @id

  branchId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branch NeonBranch @relation(fields: [branchId], references: [id])
  indexer Indexer?
}